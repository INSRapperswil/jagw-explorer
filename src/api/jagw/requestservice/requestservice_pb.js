// source: requestservice/requestservice.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var core_topology_pb = require('../core/topology_pb.js');
goog.object.extend(proto, core_topology_pb);
var core_enums_pb = require('../core/enums_pb.js');
goog.object.extend(proto, core_enums_pb);
goog.exportSymbol('proto.jagw.LsLinkResponse', null, global);
goog.exportSymbol('proto.jagw.LsNodeCoordinatesRequest', null, global);
goog.exportSymbol('proto.jagw.LsNodeCoordinatesResponse', null, global);
goog.exportSymbol('proto.jagw.LsNodeEdgeResponse', null, global);
goog.exportSymbol('proto.jagw.LsNodeResponse', null, global);
goog.exportSymbol('proto.jagw.LsPrefixResponse', null, global);
goog.exportSymbol('proto.jagw.LsSrv6SidResponse', null, global);
goog.exportSymbol('proto.jagw.Measurement', null, global);
goog.exportSymbol('proto.jagw.MeasurementColumn', null, global);
goog.exportSymbol('proto.jagw.MeasurementDetailsRequest', null, global);
goog.exportSymbol('proto.jagw.MeasurementDetailsResponse', null, global);
goog.exportSymbol('proto.jagw.MeasurementsRequest', null, global);
goog.exportSymbol('proto.jagw.MeasurementsResponse', null, global);
goog.exportSymbol('proto.jagw.RangeFilter', null, global);
goog.exportSymbol('proto.jagw.StringFilter', null, global);
goog.exportSymbol('proto.jagw.TelemetryRequest', null, global);
goog.exportSymbol('proto.jagw.TelemetryResponse', null, global);
goog.exportSymbol('proto.jagw.TopologyRequest', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.jagw.MeasurementsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.jagw.MeasurementsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.jagw.MeasurementsRequest.displayName = 'proto.jagw.MeasurementsRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.jagw.MeasurementsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.jagw.MeasurementsResponse.repeatedFields_, null);
};
goog.inherits(proto.jagw.MeasurementsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.jagw.MeasurementsResponse.displayName = 'proto.jagw.MeasurementsResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.jagw.Measurement = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.jagw.Measurement, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.jagw.Measurement.displayName = 'proto.jagw.Measurement';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.jagw.MeasurementDetailsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.jagw.MeasurementDetailsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.jagw.MeasurementDetailsRequest.displayName = 'proto.jagw.MeasurementDetailsRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.jagw.MeasurementDetailsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.jagw.MeasurementDetailsResponse.repeatedFields_, null);
};
goog.inherits(proto.jagw.MeasurementDetailsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.jagw.MeasurementDetailsResponse.displayName = 'proto.jagw.MeasurementDetailsResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.jagw.MeasurementColumn = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.jagw.MeasurementColumn, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.jagw.MeasurementColumn.displayName = 'proto.jagw.MeasurementColumn';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.jagw.TopologyRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.jagw.TopologyRequest.repeatedFields_, null);
};
goog.inherits(proto.jagw.TopologyRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.jagw.TopologyRequest.displayName = 'proto.jagw.TopologyRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.jagw.LsNodeCoordinatesRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.jagw.LsNodeCoordinatesRequest.repeatedFields_, null);
};
goog.inherits(proto.jagw.LsNodeCoordinatesRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.jagw.LsNodeCoordinatesRequest.displayName = 'proto.jagw.LsNodeCoordinatesRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.jagw.TelemetryRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.jagw.TelemetryRequest.repeatedFields_, null);
};
goog.inherits(proto.jagw.TelemetryRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.jagw.TelemetryRequest.displayName = 'proto.jagw.TelemetryRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.jagw.StringFilter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.jagw.StringFilter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.jagw.StringFilter.displayName = 'proto.jagw.StringFilter';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.jagw.RangeFilter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.jagw.RangeFilter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.jagw.RangeFilter.displayName = 'proto.jagw.RangeFilter';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.jagw.LsNodeResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.jagw.LsNodeResponse.repeatedFields_, null);
};
goog.inherits(proto.jagw.LsNodeResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.jagw.LsNodeResponse.displayName = 'proto.jagw.LsNodeResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.jagw.LsLinkResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.jagw.LsLinkResponse.repeatedFields_, null);
};
goog.inherits(proto.jagw.LsLinkResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.jagw.LsLinkResponse.displayName = 'proto.jagw.LsLinkResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.jagw.LsPrefixResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.jagw.LsPrefixResponse.repeatedFields_, null);
};
goog.inherits(proto.jagw.LsPrefixResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.jagw.LsPrefixResponse.displayName = 'proto.jagw.LsPrefixResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.jagw.LsSrv6SidResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.jagw.LsSrv6SidResponse.repeatedFields_, null);
};
goog.inherits(proto.jagw.LsSrv6SidResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.jagw.LsSrv6SidResponse.displayName = 'proto.jagw.LsSrv6SidResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.jagw.LsNodeEdgeResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.jagw.LsNodeEdgeResponse.repeatedFields_, null);
};
goog.inherits(proto.jagw.LsNodeEdgeResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.jagw.LsNodeEdgeResponse.displayName = 'proto.jagw.LsNodeEdgeResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.jagw.LsNodeCoordinatesResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.jagw.LsNodeCoordinatesResponse.repeatedFields_, null);
};
goog.inherits(proto.jagw.LsNodeCoordinatesResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.jagw.LsNodeCoordinatesResponse.displayName = 'proto.jagw.LsNodeCoordinatesResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.jagw.TelemetryResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.jagw.TelemetryResponse.repeatedFields_, null);
};
goog.inherits(proto.jagw.TelemetryResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.jagw.TelemetryResponse.displayName = 'proto.jagw.TelemetryResponse';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.jagw.MeasurementsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.jagw.MeasurementsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.jagw.MeasurementsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jagw.MeasurementsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.jagw.MeasurementsRequest}
 */
proto.jagw.MeasurementsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.jagw.MeasurementsRequest;
  return proto.jagw.MeasurementsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.jagw.MeasurementsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.jagw.MeasurementsRequest}
 */
proto.jagw.MeasurementsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.jagw.MeasurementsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.jagw.MeasurementsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.jagw.MeasurementsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jagw.MeasurementsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.jagw.MeasurementsResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.jagw.MeasurementsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.jagw.MeasurementsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.jagw.MeasurementsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jagw.MeasurementsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    measurementsList: jspb.Message.toObjectList(msg.getMeasurementsList(),
    proto.jagw.Measurement.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.jagw.MeasurementsResponse}
 */
proto.jagw.MeasurementsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.jagw.MeasurementsResponse;
  return proto.jagw.MeasurementsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.jagw.MeasurementsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.jagw.MeasurementsResponse}
 */
proto.jagw.MeasurementsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.jagw.Measurement;
      reader.readMessage(value,proto.jagw.Measurement.deserializeBinaryFromReader);
      msg.addMeasurements(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.jagw.MeasurementsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.jagw.MeasurementsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.jagw.MeasurementsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jagw.MeasurementsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMeasurementsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.jagw.Measurement.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Measurement measurements = 1;
 * @return {!Array<!proto.jagw.Measurement>}
 */
proto.jagw.MeasurementsResponse.prototype.getMeasurementsList = function() {
  return /** @type{!Array<!proto.jagw.Measurement>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.jagw.Measurement, 1));
};


/**
 * @param {!Array<!proto.jagw.Measurement>} value
 * @return {!proto.jagw.MeasurementsResponse} returns this
*/
proto.jagw.MeasurementsResponse.prototype.setMeasurementsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.jagw.Measurement=} opt_value
 * @param {number=} opt_index
 * @return {!proto.jagw.Measurement}
 */
proto.jagw.MeasurementsResponse.prototype.addMeasurements = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.jagw.Measurement, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.jagw.MeasurementsResponse} returns this
 */
proto.jagw.MeasurementsResponse.prototype.clearMeasurementsList = function() {
  return this.setMeasurementsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.jagw.Measurement.prototype.toObject = function(opt_includeInstance) {
  return proto.jagw.Measurement.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.jagw.Measurement} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jagw.Measurement.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    timestampLatestMeasurement: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.jagw.Measurement}
 */
proto.jagw.Measurement.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.jagw.Measurement;
  return proto.jagw.Measurement.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.jagw.Measurement} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.jagw.Measurement}
 */
proto.jagw.Measurement.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTimestampLatestMeasurement(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.jagw.Measurement.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.jagw.Measurement.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.jagw.Measurement} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jagw.Measurement.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt64(
      2,
      f
    );
  }
};


/**
 * required string name = 1;
 * @return {string}
 */
proto.jagw.Measurement.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.jagw.Measurement} returns this
 */
proto.jagw.Measurement.prototype.setName = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.jagw.Measurement} returns this
 */
proto.jagw.Measurement.prototype.clearName = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.jagw.Measurement.prototype.hasName = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required int64 timestamp_latest_measurement = 2;
 * @return {number}
 */
proto.jagw.Measurement.prototype.getTimestampLatestMeasurement = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.jagw.Measurement} returns this
 */
proto.jagw.Measurement.prototype.setTimestampLatestMeasurement = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.jagw.Measurement} returns this
 */
proto.jagw.Measurement.prototype.clearTimestampLatestMeasurement = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.jagw.Measurement.prototype.hasTimestampLatestMeasurement = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.jagw.MeasurementDetailsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.jagw.MeasurementDetailsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.jagw.MeasurementDetailsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jagw.MeasurementDetailsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.jagw.MeasurementDetailsRequest}
 */
proto.jagw.MeasurementDetailsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.jagw.MeasurementDetailsRequest;
  return proto.jagw.MeasurementDetailsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.jagw.MeasurementDetailsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.jagw.MeasurementDetailsRequest}
 */
proto.jagw.MeasurementDetailsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.jagw.MeasurementDetailsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.jagw.MeasurementDetailsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.jagw.MeasurementDetailsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jagw.MeasurementDetailsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * required string name = 1;
 * @return {string}
 */
proto.jagw.MeasurementDetailsRequest.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.jagw.MeasurementDetailsRequest} returns this
 */
proto.jagw.MeasurementDetailsRequest.prototype.setName = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.jagw.MeasurementDetailsRequest} returns this
 */
proto.jagw.MeasurementDetailsRequest.prototype.clearName = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.jagw.MeasurementDetailsRequest.prototype.hasName = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.jagw.MeasurementDetailsResponse.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.jagw.MeasurementDetailsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.jagw.MeasurementDetailsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.jagw.MeasurementDetailsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jagw.MeasurementDetailsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    timestampLatestMeasurement: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    columnsList: jspb.Message.toObjectList(msg.getColumnsList(),
    proto.jagw.MeasurementColumn.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.jagw.MeasurementDetailsResponse}
 */
proto.jagw.MeasurementDetailsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.jagw.MeasurementDetailsResponse;
  return proto.jagw.MeasurementDetailsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.jagw.MeasurementDetailsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.jagw.MeasurementDetailsResponse}
 */
proto.jagw.MeasurementDetailsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTimestampLatestMeasurement(value);
      break;
    case 2:
      var value = new proto.jagw.MeasurementColumn;
      reader.readMessage(value,proto.jagw.MeasurementColumn.deserializeBinaryFromReader);
      msg.addColumns(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.jagw.MeasurementDetailsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.jagw.MeasurementDetailsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.jagw.MeasurementDetailsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jagw.MeasurementDetailsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getColumnsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.jagw.MeasurementColumn.serializeBinaryToWriter
    );
  }
};


/**
 * required int64 timestamp_latest_measurement = 1;
 * @return {number}
 */
proto.jagw.MeasurementDetailsResponse.prototype.getTimestampLatestMeasurement = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.jagw.MeasurementDetailsResponse} returns this
 */
proto.jagw.MeasurementDetailsResponse.prototype.setTimestampLatestMeasurement = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.jagw.MeasurementDetailsResponse} returns this
 */
proto.jagw.MeasurementDetailsResponse.prototype.clearTimestampLatestMeasurement = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.jagw.MeasurementDetailsResponse.prototype.hasTimestampLatestMeasurement = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated MeasurementColumn columns = 2;
 * @return {!Array<!proto.jagw.MeasurementColumn>}
 */
proto.jagw.MeasurementDetailsResponse.prototype.getColumnsList = function() {
  return /** @type{!Array<!proto.jagw.MeasurementColumn>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.jagw.MeasurementColumn, 2));
};


/**
 * @param {!Array<!proto.jagw.MeasurementColumn>} value
 * @return {!proto.jagw.MeasurementDetailsResponse} returns this
*/
proto.jagw.MeasurementDetailsResponse.prototype.setColumnsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.jagw.MeasurementColumn=} opt_value
 * @param {number=} opt_index
 * @return {!proto.jagw.MeasurementColumn}
 */
proto.jagw.MeasurementDetailsResponse.prototype.addColumns = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.jagw.MeasurementColumn, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.jagw.MeasurementDetailsResponse} returns this
 */
proto.jagw.MeasurementDetailsResponse.prototype.clearColumnsList = function() {
  return this.setColumnsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.jagw.MeasurementColumn.prototype.toObject = function(opt_includeInstance) {
  return proto.jagw.MeasurementColumn.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.jagw.MeasurementColumn} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jagw.MeasurementColumn.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    type: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    influxType: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,
    lastValueStringyfied: (f = jspb.Message.getField(msg, 4)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.jagw.MeasurementColumn}
 */
proto.jagw.MeasurementColumn.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.jagw.MeasurementColumn;
  return proto.jagw.MeasurementColumn.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.jagw.MeasurementColumn} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.jagw.MeasurementColumn}
 */
proto.jagw.MeasurementColumn.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setType(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setInfluxType(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setLastValueStringyfied(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.jagw.MeasurementColumn.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.jagw.MeasurementColumn.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.jagw.MeasurementColumn} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jagw.MeasurementColumn.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * required string name = 1;
 * @return {string}
 */
proto.jagw.MeasurementColumn.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.jagw.MeasurementColumn} returns this
 */
proto.jagw.MeasurementColumn.prototype.setName = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.jagw.MeasurementColumn} returns this
 */
proto.jagw.MeasurementColumn.prototype.clearName = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.jagw.MeasurementColumn.prototype.hasName = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required string type = 2;
 * @return {string}
 */
proto.jagw.MeasurementColumn.prototype.getType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.jagw.MeasurementColumn} returns this
 */
proto.jagw.MeasurementColumn.prototype.setType = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.jagw.MeasurementColumn} returns this
 */
proto.jagw.MeasurementColumn.prototype.clearType = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.jagw.MeasurementColumn.prototype.hasType = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required string influx_type = 3;
 * @return {string}
 */
proto.jagw.MeasurementColumn.prototype.getInfluxType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.jagw.MeasurementColumn} returns this
 */
proto.jagw.MeasurementColumn.prototype.setInfluxType = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.jagw.MeasurementColumn} returns this
 */
proto.jagw.MeasurementColumn.prototype.clearInfluxType = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.jagw.MeasurementColumn.prototype.hasInfluxType = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required string last_value_stringyfied = 4;
 * @return {string}
 */
proto.jagw.MeasurementColumn.prototype.getLastValueStringyfied = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.jagw.MeasurementColumn} returns this
 */
proto.jagw.MeasurementColumn.prototype.setLastValueStringyfied = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.jagw.MeasurementColumn} returns this
 */
proto.jagw.MeasurementColumn.prototype.clearLastValueStringyfied = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.jagw.MeasurementColumn.prototype.hasLastValueStringyfied = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.jagw.TopologyRequest.repeatedFields_ = [1,2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.jagw.TopologyRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.jagw.TopologyRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.jagw.TopologyRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jagw.TopologyRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    keysList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f,
    propertyNamesList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.jagw.TopologyRequest}
 */
proto.jagw.TopologyRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.jagw.TopologyRequest;
  return proto.jagw.TopologyRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.jagw.TopologyRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.jagw.TopologyRequest}
 */
proto.jagw.TopologyRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addKeys(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addPropertyNames(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.jagw.TopologyRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.jagw.TopologyRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.jagw.TopologyRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jagw.TopologyRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKeysList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
  f = message.getPropertyNamesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
};


/**
 * repeated string keys = 1;
 * @return {!Array<string>}
 */
proto.jagw.TopologyRequest.prototype.getKeysList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.jagw.TopologyRequest} returns this
 */
proto.jagw.TopologyRequest.prototype.setKeysList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.jagw.TopologyRequest} returns this
 */
proto.jagw.TopologyRequest.prototype.addKeys = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.jagw.TopologyRequest} returns this
 */
proto.jagw.TopologyRequest.prototype.clearKeysList = function() {
  return this.setKeysList([]);
};


/**
 * repeated string property_names = 2;
 * @return {!Array<string>}
 */
proto.jagw.TopologyRequest.prototype.getPropertyNamesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.jagw.TopologyRequest} returns this
 */
proto.jagw.TopologyRequest.prototype.setPropertyNamesList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.jagw.TopologyRequest} returns this
 */
proto.jagw.TopologyRequest.prototype.addPropertyNames = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.jagw.TopologyRequest} returns this
 */
proto.jagw.TopologyRequest.prototype.clearPropertyNamesList = function() {
  return this.setPropertyNamesList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.jagw.LsNodeCoordinatesRequest.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.jagw.LsNodeCoordinatesRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.jagw.LsNodeCoordinatesRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.jagw.LsNodeCoordinatesRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jagw.LsNodeCoordinatesRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    lsNodeKeysList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.jagw.LsNodeCoordinatesRequest}
 */
proto.jagw.LsNodeCoordinatesRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.jagw.LsNodeCoordinatesRequest;
  return proto.jagw.LsNodeCoordinatesRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.jagw.LsNodeCoordinatesRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.jagw.LsNodeCoordinatesRequest}
 */
proto.jagw.LsNodeCoordinatesRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addLsNodeKeys(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.jagw.LsNodeCoordinatesRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.jagw.LsNodeCoordinatesRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.jagw.LsNodeCoordinatesRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jagw.LsNodeCoordinatesRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLsNodeKeysList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
};


/**
 * repeated string ls_node_keys = 1;
 * @return {!Array<string>}
 */
proto.jagw.LsNodeCoordinatesRequest.prototype.getLsNodeKeysList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.jagw.LsNodeCoordinatesRequest} returns this
 */
proto.jagw.LsNodeCoordinatesRequest.prototype.setLsNodeKeysList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.jagw.LsNodeCoordinatesRequest} returns this
 */
proto.jagw.LsNodeCoordinatesRequest.prototype.addLsNodeKeys = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.jagw.LsNodeCoordinatesRequest} returns this
 */
proto.jagw.LsNodeCoordinatesRequest.prototype.clearLsNodeKeysList = function() {
  return this.setLsNodeKeysList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.jagw.TelemetryRequest.repeatedFields_ = [2,3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.jagw.TelemetryRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.jagw.TelemetryRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.jagw.TelemetryRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jagw.TelemetryRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    sensorPath: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    propertiesList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f,
    stringFiltersList: jspb.Message.toObjectList(msg.getStringFiltersList(),
    proto.jagw.StringFilter.toObject, includeInstance),
    rangeFilter: (f = msg.getRangeFilter()) && proto.jagw.RangeFilter.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.jagw.TelemetryRequest}
 */
proto.jagw.TelemetryRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.jagw.TelemetryRequest;
  return proto.jagw.TelemetryRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.jagw.TelemetryRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.jagw.TelemetryRequest}
 */
proto.jagw.TelemetryRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSensorPath(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addProperties(value);
      break;
    case 3:
      var value = new proto.jagw.StringFilter;
      reader.readMessage(value,proto.jagw.StringFilter.deserializeBinaryFromReader);
      msg.addStringFilters(value);
      break;
    case 4:
      var value = new proto.jagw.RangeFilter;
      reader.readMessage(value,proto.jagw.RangeFilter.deserializeBinaryFromReader);
      msg.setRangeFilter(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.jagw.TelemetryRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.jagw.TelemetryRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.jagw.TelemetryRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jagw.TelemetryRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPropertiesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
  f = message.getStringFiltersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.jagw.StringFilter.serializeBinaryToWriter
    );
  }
  f = message.getRangeFilter();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.jagw.RangeFilter.serializeBinaryToWriter
    );
  }
};


/**
 * required string sensor_path = 1;
 * @return {string}
 */
proto.jagw.TelemetryRequest.prototype.getSensorPath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.jagw.TelemetryRequest} returns this
 */
proto.jagw.TelemetryRequest.prototype.setSensorPath = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.jagw.TelemetryRequest} returns this
 */
proto.jagw.TelemetryRequest.prototype.clearSensorPath = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.jagw.TelemetryRequest.prototype.hasSensorPath = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated string properties = 2;
 * @return {!Array<string>}
 */
proto.jagw.TelemetryRequest.prototype.getPropertiesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.jagw.TelemetryRequest} returns this
 */
proto.jagw.TelemetryRequest.prototype.setPropertiesList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.jagw.TelemetryRequest} returns this
 */
proto.jagw.TelemetryRequest.prototype.addProperties = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.jagw.TelemetryRequest} returns this
 */
proto.jagw.TelemetryRequest.prototype.clearPropertiesList = function() {
  return this.setPropertiesList([]);
};


/**
 * repeated StringFilter string_filters = 3;
 * @return {!Array<!proto.jagw.StringFilter>}
 */
proto.jagw.TelemetryRequest.prototype.getStringFiltersList = function() {
  return /** @type{!Array<!proto.jagw.StringFilter>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.jagw.StringFilter, 3));
};


/**
 * @param {!Array<!proto.jagw.StringFilter>} value
 * @return {!proto.jagw.TelemetryRequest} returns this
*/
proto.jagw.TelemetryRequest.prototype.setStringFiltersList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.jagw.StringFilter=} opt_value
 * @param {number=} opt_index
 * @return {!proto.jagw.StringFilter}
 */
proto.jagw.TelemetryRequest.prototype.addStringFilters = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.jagw.StringFilter, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.jagw.TelemetryRequest} returns this
 */
proto.jagw.TelemetryRequest.prototype.clearStringFiltersList = function() {
  return this.setStringFiltersList([]);
};


/**
 * optional RangeFilter range_filter = 4;
 * @return {?proto.jagw.RangeFilter}
 */
proto.jagw.TelemetryRequest.prototype.getRangeFilter = function() {
  return /** @type{?proto.jagw.RangeFilter} */ (
    jspb.Message.getWrapperField(this, proto.jagw.RangeFilter, 4));
};


/**
 * @param {?proto.jagw.RangeFilter|undefined} value
 * @return {!proto.jagw.TelemetryRequest} returns this
*/
proto.jagw.TelemetryRequest.prototype.setRangeFilter = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.jagw.TelemetryRequest} returns this
 */
proto.jagw.TelemetryRequest.prototype.clearRangeFilter = function() {
  return this.setRangeFilter(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.jagw.TelemetryRequest.prototype.hasRangeFilter = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.jagw.StringFilter.prototype.toObject = function(opt_includeInstance) {
  return proto.jagw.StringFilter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.jagw.StringFilter} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jagw.StringFilter.toObject = function(includeInstance, msg) {
  var f, obj = {
    property: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    value: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    operator: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.jagw.StringFilter}
 */
proto.jagw.StringFilter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.jagw.StringFilter;
  return proto.jagw.StringFilter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.jagw.StringFilter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.jagw.StringFilter}
 */
proto.jagw.StringFilter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setProperty(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setValue(value);
      break;
    case 3:
      var value = /** @type {!proto.jagw.StringOperator} */ (reader.readEnum());
      msg.setOperator(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.jagw.StringFilter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.jagw.StringFilter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.jagw.StringFilter} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jagw.StringFilter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {!proto.jagw.StringOperator} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeEnum(
      3,
      f
    );
  }
};


/**
 * required string property = 1;
 * @return {string}
 */
proto.jagw.StringFilter.prototype.getProperty = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.jagw.StringFilter} returns this
 */
proto.jagw.StringFilter.prototype.setProperty = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.jagw.StringFilter} returns this
 */
proto.jagw.StringFilter.prototype.clearProperty = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.jagw.StringFilter.prototype.hasProperty = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required string value = 2;
 * @return {string}
 */
proto.jagw.StringFilter.prototype.getValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.jagw.StringFilter} returns this
 */
proto.jagw.StringFilter.prototype.setValue = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.jagw.StringFilter} returns this
 */
proto.jagw.StringFilter.prototype.clearValue = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.jagw.StringFilter.prototype.hasValue = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required StringOperator operator = 3;
 * @return {!proto.jagw.StringOperator}
 */
proto.jagw.StringFilter.prototype.getOperator = function() {
  return /** @type {!proto.jagw.StringOperator} */ (jspb.Message.getFieldWithDefault(this, 3, 1));
};


/**
 * @param {!proto.jagw.StringOperator} value
 * @return {!proto.jagw.StringFilter} returns this
 */
proto.jagw.StringFilter.prototype.setOperator = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.jagw.StringFilter} returns this
 */
proto.jagw.StringFilter.prototype.clearOperator = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.jagw.StringFilter.prototype.hasOperator = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.jagw.RangeFilter.prototype.toObject = function(opt_includeInstance) {
  return proto.jagw.RangeFilter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.jagw.RangeFilter} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jagw.RangeFilter.toObject = function(includeInstance, msg) {
  var f, obj = {
    earliestTimestamp: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,
    latestTimestamp: (f = jspb.Message.getField(msg, 4)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.jagw.RangeFilter}
 */
proto.jagw.RangeFilter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.jagw.RangeFilter;
  return proto.jagw.RangeFilter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.jagw.RangeFilter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.jagw.RangeFilter}
 */
proto.jagw.RangeFilter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setEarliestTimestamp(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setLatestTimestamp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.jagw.RangeFilter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.jagw.RangeFilter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.jagw.RangeFilter} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jagw.RangeFilter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeInt64(
      4,
      f
    );
  }
};


/**
 * required int64 earliest_timestamp = 3;
 * @return {number}
 */
proto.jagw.RangeFilter.prototype.getEarliestTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.jagw.RangeFilter} returns this
 */
proto.jagw.RangeFilter.prototype.setEarliestTimestamp = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.jagw.RangeFilter} returns this
 */
proto.jagw.RangeFilter.prototype.clearEarliestTimestamp = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.jagw.RangeFilter.prototype.hasEarliestTimestamp = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional int64 latest_timestamp = 4;
 * @return {number}
 */
proto.jagw.RangeFilter.prototype.getLatestTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.jagw.RangeFilter} returns this
 */
proto.jagw.RangeFilter.prototype.setLatestTimestamp = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.jagw.RangeFilter} returns this
 */
proto.jagw.RangeFilter.prototype.clearLatestTimestamp = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.jagw.RangeFilter.prototype.hasLatestTimestamp = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.jagw.LsNodeResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.jagw.LsNodeResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.jagw.LsNodeResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.jagw.LsNodeResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jagw.LsNodeResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    lsNodesList: jspb.Message.toObjectList(msg.getLsNodesList(),
    core_topology_pb.LsNode.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.jagw.LsNodeResponse}
 */
proto.jagw.LsNodeResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.jagw.LsNodeResponse;
  return proto.jagw.LsNodeResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.jagw.LsNodeResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.jagw.LsNodeResponse}
 */
proto.jagw.LsNodeResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new core_topology_pb.LsNode;
      reader.readMessage(value,core_topology_pb.LsNode.deserializeBinaryFromReader);
      msg.addLsNodes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.jagw.LsNodeResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.jagw.LsNodeResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.jagw.LsNodeResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jagw.LsNodeResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLsNodesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      core_topology_pb.LsNode.serializeBinaryToWriter
    );
  }
};


/**
 * repeated LsNode ls_nodes = 1;
 * @return {!Array<!proto.jagw.LsNode>}
 */
proto.jagw.LsNodeResponse.prototype.getLsNodesList = function() {
  return /** @type{!Array<!proto.jagw.LsNode>} */ (
    jspb.Message.getRepeatedWrapperField(this, core_topology_pb.LsNode, 1));
};


/**
 * @param {!Array<!proto.jagw.LsNode>} value
 * @return {!proto.jagw.LsNodeResponse} returns this
*/
proto.jagw.LsNodeResponse.prototype.setLsNodesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.jagw.LsNode=} opt_value
 * @param {number=} opt_index
 * @return {!proto.jagw.LsNode}
 */
proto.jagw.LsNodeResponse.prototype.addLsNodes = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.jagw.LsNode, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.jagw.LsNodeResponse} returns this
 */
proto.jagw.LsNodeResponse.prototype.clearLsNodesList = function() {
  return this.setLsNodesList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.jagw.LsLinkResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.jagw.LsLinkResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.jagw.LsLinkResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.jagw.LsLinkResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jagw.LsLinkResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    lsLinksList: jspb.Message.toObjectList(msg.getLsLinksList(),
    core_topology_pb.LsLink.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.jagw.LsLinkResponse}
 */
proto.jagw.LsLinkResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.jagw.LsLinkResponse;
  return proto.jagw.LsLinkResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.jagw.LsLinkResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.jagw.LsLinkResponse}
 */
proto.jagw.LsLinkResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new core_topology_pb.LsLink;
      reader.readMessage(value,core_topology_pb.LsLink.deserializeBinaryFromReader);
      msg.addLsLinks(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.jagw.LsLinkResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.jagw.LsLinkResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.jagw.LsLinkResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jagw.LsLinkResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLsLinksList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      core_topology_pb.LsLink.serializeBinaryToWriter
    );
  }
};


/**
 * repeated LsLink ls_links = 1;
 * @return {!Array<!proto.jagw.LsLink>}
 */
proto.jagw.LsLinkResponse.prototype.getLsLinksList = function() {
  return /** @type{!Array<!proto.jagw.LsLink>} */ (
    jspb.Message.getRepeatedWrapperField(this, core_topology_pb.LsLink, 1));
};


/**
 * @param {!Array<!proto.jagw.LsLink>} value
 * @return {!proto.jagw.LsLinkResponse} returns this
*/
proto.jagw.LsLinkResponse.prototype.setLsLinksList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.jagw.LsLink=} opt_value
 * @param {number=} opt_index
 * @return {!proto.jagw.LsLink}
 */
proto.jagw.LsLinkResponse.prototype.addLsLinks = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.jagw.LsLink, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.jagw.LsLinkResponse} returns this
 */
proto.jagw.LsLinkResponse.prototype.clearLsLinksList = function() {
  return this.setLsLinksList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.jagw.LsPrefixResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.jagw.LsPrefixResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.jagw.LsPrefixResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.jagw.LsPrefixResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jagw.LsPrefixResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    lsPrefixesList: jspb.Message.toObjectList(msg.getLsPrefixesList(),
    core_topology_pb.LsPrefix.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.jagw.LsPrefixResponse}
 */
proto.jagw.LsPrefixResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.jagw.LsPrefixResponse;
  return proto.jagw.LsPrefixResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.jagw.LsPrefixResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.jagw.LsPrefixResponse}
 */
proto.jagw.LsPrefixResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new core_topology_pb.LsPrefix;
      reader.readMessage(value,core_topology_pb.LsPrefix.deserializeBinaryFromReader);
      msg.addLsPrefixes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.jagw.LsPrefixResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.jagw.LsPrefixResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.jagw.LsPrefixResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jagw.LsPrefixResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLsPrefixesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      core_topology_pb.LsPrefix.serializeBinaryToWriter
    );
  }
};


/**
 * repeated LsPrefix ls_prefixes = 1;
 * @return {!Array<!proto.jagw.LsPrefix>}
 */
proto.jagw.LsPrefixResponse.prototype.getLsPrefixesList = function() {
  return /** @type{!Array<!proto.jagw.LsPrefix>} */ (
    jspb.Message.getRepeatedWrapperField(this, core_topology_pb.LsPrefix, 1));
};


/**
 * @param {!Array<!proto.jagw.LsPrefix>} value
 * @return {!proto.jagw.LsPrefixResponse} returns this
*/
proto.jagw.LsPrefixResponse.prototype.setLsPrefixesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.jagw.LsPrefix=} opt_value
 * @param {number=} opt_index
 * @return {!proto.jagw.LsPrefix}
 */
proto.jagw.LsPrefixResponse.prototype.addLsPrefixes = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.jagw.LsPrefix, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.jagw.LsPrefixResponse} returns this
 */
proto.jagw.LsPrefixResponse.prototype.clearLsPrefixesList = function() {
  return this.setLsPrefixesList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.jagw.LsSrv6SidResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.jagw.LsSrv6SidResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.jagw.LsSrv6SidResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.jagw.LsSrv6SidResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jagw.LsSrv6SidResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    lsSrv6SidsList: jspb.Message.toObjectList(msg.getLsSrv6SidsList(),
    core_topology_pb.LsSrv6Sid.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.jagw.LsSrv6SidResponse}
 */
proto.jagw.LsSrv6SidResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.jagw.LsSrv6SidResponse;
  return proto.jagw.LsSrv6SidResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.jagw.LsSrv6SidResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.jagw.LsSrv6SidResponse}
 */
proto.jagw.LsSrv6SidResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new core_topology_pb.LsSrv6Sid;
      reader.readMessage(value,core_topology_pb.LsSrv6Sid.deserializeBinaryFromReader);
      msg.addLsSrv6Sids(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.jagw.LsSrv6SidResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.jagw.LsSrv6SidResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.jagw.LsSrv6SidResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jagw.LsSrv6SidResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLsSrv6SidsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      core_topology_pb.LsSrv6Sid.serializeBinaryToWriter
    );
  }
};


/**
 * repeated LsSrv6Sid ls_srv6_sids = 1;
 * @return {!Array<!proto.jagw.LsSrv6Sid>}
 */
proto.jagw.LsSrv6SidResponse.prototype.getLsSrv6SidsList = function() {
  return /** @type{!Array<!proto.jagw.LsSrv6Sid>} */ (
    jspb.Message.getRepeatedWrapperField(this, core_topology_pb.LsSrv6Sid, 1));
};


/**
 * @param {!Array<!proto.jagw.LsSrv6Sid>} value
 * @return {!proto.jagw.LsSrv6SidResponse} returns this
*/
proto.jagw.LsSrv6SidResponse.prototype.setLsSrv6SidsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.jagw.LsSrv6Sid=} opt_value
 * @param {number=} opt_index
 * @return {!proto.jagw.LsSrv6Sid}
 */
proto.jagw.LsSrv6SidResponse.prototype.addLsSrv6Sids = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.jagw.LsSrv6Sid, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.jagw.LsSrv6SidResponse} returns this
 */
proto.jagw.LsSrv6SidResponse.prototype.clearLsSrv6SidsList = function() {
  return this.setLsSrv6SidsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.jagw.LsNodeEdgeResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.jagw.LsNodeEdgeResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.jagw.LsNodeEdgeResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.jagw.LsNodeEdgeResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jagw.LsNodeEdgeResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    lsNodeEdgesList: jspb.Message.toObjectList(msg.getLsNodeEdgesList(),
    core_topology_pb.LsNodeEdge.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.jagw.LsNodeEdgeResponse}
 */
proto.jagw.LsNodeEdgeResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.jagw.LsNodeEdgeResponse;
  return proto.jagw.LsNodeEdgeResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.jagw.LsNodeEdgeResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.jagw.LsNodeEdgeResponse}
 */
proto.jagw.LsNodeEdgeResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new core_topology_pb.LsNodeEdge;
      reader.readMessage(value,core_topology_pb.LsNodeEdge.deserializeBinaryFromReader);
      msg.addLsNodeEdges(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.jagw.LsNodeEdgeResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.jagw.LsNodeEdgeResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.jagw.LsNodeEdgeResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jagw.LsNodeEdgeResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLsNodeEdgesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      core_topology_pb.LsNodeEdge.serializeBinaryToWriter
    );
  }
};


/**
 * repeated LsNodeEdge ls_node_edges = 1;
 * @return {!Array<!proto.jagw.LsNodeEdge>}
 */
proto.jagw.LsNodeEdgeResponse.prototype.getLsNodeEdgesList = function() {
  return /** @type{!Array<!proto.jagw.LsNodeEdge>} */ (
    jspb.Message.getRepeatedWrapperField(this, core_topology_pb.LsNodeEdge, 1));
};


/**
 * @param {!Array<!proto.jagw.LsNodeEdge>} value
 * @return {!proto.jagw.LsNodeEdgeResponse} returns this
*/
proto.jagw.LsNodeEdgeResponse.prototype.setLsNodeEdgesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.jagw.LsNodeEdge=} opt_value
 * @param {number=} opt_index
 * @return {!proto.jagw.LsNodeEdge}
 */
proto.jagw.LsNodeEdgeResponse.prototype.addLsNodeEdges = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.jagw.LsNodeEdge, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.jagw.LsNodeEdgeResponse} returns this
 */
proto.jagw.LsNodeEdgeResponse.prototype.clearLsNodeEdgesList = function() {
  return this.setLsNodeEdgesList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.jagw.LsNodeCoordinatesResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.jagw.LsNodeCoordinatesResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.jagw.LsNodeCoordinatesResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.jagw.LsNodeCoordinatesResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jagw.LsNodeCoordinatesResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    coordinatesList: jspb.Message.toObjectList(msg.getCoordinatesList(),
    core_topology_pb.LsNodeCoordinates.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.jagw.LsNodeCoordinatesResponse}
 */
proto.jagw.LsNodeCoordinatesResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.jagw.LsNodeCoordinatesResponse;
  return proto.jagw.LsNodeCoordinatesResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.jagw.LsNodeCoordinatesResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.jagw.LsNodeCoordinatesResponse}
 */
proto.jagw.LsNodeCoordinatesResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new core_topology_pb.LsNodeCoordinates;
      reader.readMessage(value,core_topology_pb.LsNodeCoordinates.deserializeBinaryFromReader);
      msg.addCoordinates(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.jagw.LsNodeCoordinatesResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.jagw.LsNodeCoordinatesResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.jagw.LsNodeCoordinatesResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jagw.LsNodeCoordinatesResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCoordinatesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      core_topology_pb.LsNodeCoordinates.serializeBinaryToWriter
    );
  }
};


/**
 * repeated LsNodeCoordinates coordinates = 1;
 * @return {!Array<!proto.jagw.LsNodeCoordinates>}
 */
proto.jagw.LsNodeCoordinatesResponse.prototype.getCoordinatesList = function() {
  return /** @type{!Array<!proto.jagw.LsNodeCoordinates>} */ (
    jspb.Message.getRepeatedWrapperField(this, core_topology_pb.LsNodeCoordinates, 1));
};


/**
 * @param {!Array<!proto.jagw.LsNodeCoordinates>} value
 * @return {!proto.jagw.LsNodeCoordinatesResponse} returns this
*/
proto.jagw.LsNodeCoordinatesResponse.prototype.setCoordinatesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.jagw.LsNodeCoordinates=} opt_value
 * @param {number=} opt_index
 * @return {!proto.jagw.LsNodeCoordinates}
 */
proto.jagw.LsNodeCoordinatesResponse.prototype.addCoordinates = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.jagw.LsNodeCoordinates, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.jagw.LsNodeCoordinatesResponse} returns this
 */
proto.jagw.LsNodeCoordinatesResponse.prototype.clearCoordinatesList = function() {
  return this.setCoordinatesList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.jagw.TelemetryResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.jagw.TelemetryResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.jagw.TelemetryResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.jagw.TelemetryResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jagw.TelemetryResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    telemetryDataList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.jagw.TelemetryResponse}
 */
proto.jagw.TelemetryResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.jagw.TelemetryResponse;
  return proto.jagw.TelemetryResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.jagw.TelemetryResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.jagw.TelemetryResponse}
 */
proto.jagw.TelemetryResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addTelemetryData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.jagw.TelemetryResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.jagw.TelemetryResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.jagw.TelemetryResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jagw.TelemetryResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTelemetryDataList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
};


/**
 * repeated string telemetry_data = 1;
 * @return {!Array<string>}
 */
proto.jagw.TelemetryResponse.prototype.getTelemetryDataList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.jagw.TelemetryResponse} returns this
 */
proto.jagw.TelemetryResponse.prototype.setTelemetryDataList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.jagw.TelemetryResponse} returns this
 */
proto.jagw.TelemetryResponse.prototype.addTelemetryData = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.jagw.TelemetryResponse} returns this
 */
proto.jagw.TelemetryResponse.prototype.clearTelemetryDataList = function() {
  return this.setTelemetryDataList([]);
};


goog.object.extend(exports, proto.jagw);
