// source: subscriptionservice/subscriptionservice.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var core_topology_pb = require('../core/topology_pb.js');
goog.object.extend(proto, core_topology_pb);
var core_base_pb = require('../core/base_pb.js');
goog.object.extend(proto, core_base_pb);
goog.exportSymbol('proto.jagw.LsLinkEvent', null, global);
goog.exportSymbol('proto.jagw.LsNodeEdgeEvent', null, global);
goog.exportSymbol('proto.jagw.LsNodeEvent', null, global);
goog.exportSymbol('proto.jagw.LsPrefixEvent', null, global);
goog.exportSymbol('proto.jagw.LsSrv6SidEvent', null, global);
goog.exportSymbol('proto.jagw.TelemetryEvent', null, global);
goog.exportSymbol('proto.jagw.TelemetrySubscription', null, global);
goog.exportSymbol('proto.jagw.TopologySubscription', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.jagw.TopologySubscription = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.jagw.TopologySubscription.repeatedFields_, null);
};
goog.inherits(proto.jagw.TopologySubscription, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.jagw.TopologySubscription.displayName = 'proto.jagw.TopologySubscription';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.jagw.TelemetrySubscription = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.jagw.TelemetrySubscription.repeatedFields_, null);
};
goog.inherits(proto.jagw.TelemetrySubscription, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.jagw.TelemetrySubscription.displayName = 'proto.jagw.TelemetrySubscription';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.jagw.LsNodeEvent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.jagw.LsNodeEvent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.jagw.LsNodeEvent.displayName = 'proto.jagw.LsNodeEvent';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.jagw.LsLinkEvent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.jagw.LsLinkEvent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.jagw.LsLinkEvent.displayName = 'proto.jagw.LsLinkEvent';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.jagw.LsPrefixEvent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.jagw.LsPrefixEvent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.jagw.LsPrefixEvent.displayName = 'proto.jagw.LsPrefixEvent';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.jagw.LsSrv6SidEvent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.jagw.LsSrv6SidEvent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.jagw.LsSrv6SidEvent.displayName = 'proto.jagw.LsSrv6SidEvent';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.jagw.LsNodeEdgeEvent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.jagw.LsNodeEdgeEvent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.jagw.LsNodeEdgeEvent.displayName = 'proto.jagw.LsNodeEdgeEvent';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.jagw.TelemetryEvent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.jagw.TelemetryEvent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.jagw.TelemetryEvent.displayName = 'proto.jagw.TelemetryEvent';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.jagw.TopologySubscription.repeatedFields_ = [1,2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.jagw.TopologySubscription.prototype.toObject = function(opt_includeInstance) {
  return proto.jagw.TopologySubscription.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.jagw.TopologySubscription} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jagw.TopologySubscription.toObject = function(includeInstance, msg) {
  var f, obj = {
    keysList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f,
    propertyNamesList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.jagw.TopologySubscription}
 */
proto.jagw.TopologySubscription.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.jagw.TopologySubscription;
  return proto.jagw.TopologySubscription.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.jagw.TopologySubscription} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.jagw.TopologySubscription}
 */
proto.jagw.TopologySubscription.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addKeys(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addPropertyNames(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.jagw.TopologySubscription.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.jagw.TopologySubscription.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.jagw.TopologySubscription} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jagw.TopologySubscription.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKeysList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
  f = message.getPropertyNamesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
};


/**
 * repeated string keys = 1;
 * @return {!Array<string>}
 */
proto.jagw.TopologySubscription.prototype.getKeysList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.jagw.TopologySubscription} returns this
 */
proto.jagw.TopologySubscription.prototype.setKeysList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.jagw.TopologySubscription} returns this
 */
proto.jagw.TopologySubscription.prototype.addKeys = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.jagw.TopologySubscription} returns this
 */
proto.jagw.TopologySubscription.prototype.clearKeysList = function() {
  return this.setKeysList([]);
};


/**
 * repeated string property_names = 2;
 * @return {!Array<string>}
 */
proto.jagw.TopologySubscription.prototype.getPropertyNamesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.jagw.TopologySubscription} returns this
 */
proto.jagw.TopologySubscription.prototype.setPropertyNamesList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.jagw.TopologySubscription} returns this
 */
proto.jagw.TopologySubscription.prototype.addPropertyNames = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.jagw.TopologySubscription} returns this
 */
proto.jagw.TopologySubscription.prototype.clearPropertyNamesList = function() {
  return this.setPropertyNamesList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.jagw.TelemetrySubscription.repeatedFields_ = [1,2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.jagw.TelemetrySubscription.prototype.toObject = function(opt_includeInstance) {
  return proto.jagw.TelemetrySubscription.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.jagw.TelemetrySubscription} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jagw.TelemetrySubscription.toObject = function(includeInstance, msg) {
  var f, obj = {
    interfaceIdsList: jspb.Message.toObjectList(msg.getInterfaceIdsList(),
    core_base_pb.InterfaceIdentifier.toObject, includeInstance),
    propertyNamesList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.jagw.TelemetrySubscription}
 */
proto.jagw.TelemetrySubscription.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.jagw.TelemetrySubscription;
  return proto.jagw.TelemetrySubscription.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.jagw.TelemetrySubscription} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.jagw.TelemetrySubscription}
 */
proto.jagw.TelemetrySubscription.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new core_base_pb.InterfaceIdentifier;
      reader.readMessage(value,core_base_pb.InterfaceIdentifier.deserializeBinaryFromReader);
      msg.addInterfaceIds(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addPropertyNames(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.jagw.TelemetrySubscription.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.jagw.TelemetrySubscription.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.jagw.TelemetrySubscription} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jagw.TelemetrySubscription.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInterfaceIdsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      core_base_pb.InterfaceIdentifier.serializeBinaryToWriter
    );
  }
  f = message.getPropertyNamesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
};


/**
 * repeated InterfaceIdentifier interface_ids = 1;
 * @return {!Array<!proto.jagw.InterfaceIdentifier>}
 */
proto.jagw.TelemetrySubscription.prototype.getInterfaceIdsList = function() {
  return /** @type{!Array<!proto.jagw.InterfaceIdentifier>} */ (
    jspb.Message.getRepeatedWrapperField(this, core_base_pb.InterfaceIdentifier, 1));
};


/**
 * @param {!Array<!proto.jagw.InterfaceIdentifier>} value
 * @return {!proto.jagw.TelemetrySubscription} returns this
*/
proto.jagw.TelemetrySubscription.prototype.setInterfaceIdsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.jagw.InterfaceIdentifier=} opt_value
 * @param {number=} opt_index
 * @return {!proto.jagw.InterfaceIdentifier}
 */
proto.jagw.TelemetrySubscription.prototype.addInterfaceIds = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.jagw.InterfaceIdentifier, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.jagw.TelemetrySubscription} returns this
 */
proto.jagw.TelemetrySubscription.prototype.clearInterfaceIdsList = function() {
  return this.setInterfaceIdsList([]);
};


/**
 * repeated string property_names = 2;
 * @return {!Array<string>}
 */
proto.jagw.TelemetrySubscription.prototype.getPropertyNamesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.jagw.TelemetrySubscription} returns this
 */
proto.jagw.TelemetrySubscription.prototype.setPropertyNamesList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.jagw.TelemetrySubscription} returns this
 */
proto.jagw.TelemetrySubscription.prototype.addPropertyNames = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.jagw.TelemetrySubscription} returns this
 */
proto.jagw.TelemetrySubscription.prototype.clearPropertyNamesList = function() {
  return this.setPropertyNamesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.jagw.LsNodeEvent.prototype.toObject = function(opt_includeInstance) {
  return proto.jagw.LsNodeEvent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.jagw.LsNodeEvent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jagw.LsNodeEvent.toObject = function(includeInstance, msg) {
  var f, obj = {
    action: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    key: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    lsNode: (f = msg.getLsNode()) && core_topology_pb.LsNode.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.jagw.LsNodeEvent}
 */
proto.jagw.LsNodeEvent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.jagw.LsNodeEvent;
  return proto.jagw.LsNodeEvent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.jagw.LsNodeEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.jagw.LsNodeEvent}
 */
proto.jagw.LsNodeEvent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAction(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setKey(value);
      break;
    case 3:
      var value = new core_topology_pb.LsNode;
      reader.readMessage(value,core_topology_pb.LsNode.deserializeBinaryFromReader);
      msg.setLsNode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.jagw.LsNodeEvent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.jagw.LsNodeEvent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.jagw.LsNodeEvent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jagw.LsNodeEvent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getLsNode();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      core_topology_pb.LsNode.serializeBinaryToWriter
    );
  }
};


/**
 * required string action = 1;
 * @return {string}
 */
proto.jagw.LsNodeEvent.prototype.getAction = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.jagw.LsNodeEvent} returns this
 */
proto.jagw.LsNodeEvent.prototype.setAction = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.jagw.LsNodeEvent} returns this
 */
proto.jagw.LsNodeEvent.prototype.clearAction = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.jagw.LsNodeEvent.prototype.hasAction = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required string key = 2;
 * @return {string}
 */
proto.jagw.LsNodeEvent.prototype.getKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.jagw.LsNodeEvent} returns this
 */
proto.jagw.LsNodeEvent.prototype.setKey = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.jagw.LsNodeEvent} returns this
 */
proto.jagw.LsNodeEvent.prototype.clearKey = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.jagw.LsNodeEvent.prototype.hasKey = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional LsNode ls_node = 3;
 * @return {?proto.jagw.LsNode}
 */
proto.jagw.LsNodeEvent.prototype.getLsNode = function() {
  return /** @type{?proto.jagw.LsNode} */ (
    jspb.Message.getWrapperField(this, core_topology_pb.LsNode, 3));
};


/**
 * @param {?proto.jagw.LsNode|undefined} value
 * @return {!proto.jagw.LsNodeEvent} returns this
*/
proto.jagw.LsNodeEvent.prototype.setLsNode = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.jagw.LsNodeEvent} returns this
 */
proto.jagw.LsNodeEvent.prototype.clearLsNode = function() {
  return this.setLsNode(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.jagw.LsNodeEvent.prototype.hasLsNode = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.jagw.LsLinkEvent.prototype.toObject = function(opt_includeInstance) {
  return proto.jagw.LsLinkEvent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.jagw.LsLinkEvent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jagw.LsLinkEvent.toObject = function(includeInstance, msg) {
  var f, obj = {
    action: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    key: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    lsLink: (f = msg.getLsLink()) && core_topology_pb.LsLink.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.jagw.LsLinkEvent}
 */
proto.jagw.LsLinkEvent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.jagw.LsLinkEvent;
  return proto.jagw.LsLinkEvent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.jagw.LsLinkEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.jagw.LsLinkEvent}
 */
proto.jagw.LsLinkEvent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAction(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setKey(value);
      break;
    case 3:
      var value = new core_topology_pb.LsLink;
      reader.readMessage(value,core_topology_pb.LsLink.deserializeBinaryFromReader);
      msg.setLsLink(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.jagw.LsLinkEvent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.jagw.LsLinkEvent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.jagw.LsLinkEvent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jagw.LsLinkEvent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getLsLink();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      core_topology_pb.LsLink.serializeBinaryToWriter
    );
  }
};


/**
 * required string action = 1;
 * @return {string}
 */
proto.jagw.LsLinkEvent.prototype.getAction = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.jagw.LsLinkEvent} returns this
 */
proto.jagw.LsLinkEvent.prototype.setAction = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.jagw.LsLinkEvent} returns this
 */
proto.jagw.LsLinkEvent.prototype.clearAction = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.jagw.LsLinkEvent.prototype.hasAction = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required string key = 2;
 * @return {string}
 */
proto.jagw.LsLinkEvent.prototype.getKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.jagw.LsLinkEvent} returns this
 */
proto.jagw.LsLinkEvent.prototype.setKey = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.jagw.LsLinkEvent} returns this
 */
proto.jagw.LsLinkEvent.prototype.clearKey = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.jagw.LsLinkEvent.prototype.hasKey = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional LsLink ls_link = 3;
 * @return {?proto.jagw.LsLink}
 */
proto.jagw.LsLinkEvent.prototype.getLsLink = function() {
  return /** @type{?proto.jagw.LsLink} */ (
    jspb.Message.getWrapperField(this, core_topology_pb.LsLink, 3));
};


/**
 * @param {?proto.jagw.LsLink|undefined} value
 * @return {!proto.jagw.LsLinkEvent} returns this
*/
proto.jagw.LsLinkEvent.prototype.setLsLink = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.jagw.LsLinkEvent} returns this
 */
proto.jagw.LsLinkEvent.prototype.clearLsLink = function() {
  return this.setLsLink(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.jagw.LsLinkEvent.prototype.hasLsLink = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.jagw.LsPrefixEvent.prototype.toObject = function(opt_includeInstance) {
  return proto.jagw.LsPrefixEvent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.jagw.LsPrefixEvent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jagw.LsPrefixEvent.toObject = function(includeInstance, msg) {
  var f, obj = {
    action: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    key: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    lsPrefix: (f = msg.getLsPrefix()) && core_topology_pb.LsPrefix.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.jagw.LsPrefixEvent}
 */
proto.jagw.LsPrefixEvent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.jagw.LsPrefixEvent;
  return proto.jagw.LsPrefixEvent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.jagw.LsPrefixEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.jagw.LsPrefixEvent}
 */
proto.jagw.LsPrefixEvent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAction(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setKey(value);
      break;
    case 3:
      var value = new core_topology_pb.LsPrefix;
      reader.readMessage(value,core_topology_pb.LsPrefix.deserializeBinaryFromReader);
      msg.setLsPrefix(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.jagw.LsPrefixEvent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.jagw.LsPrefixEvent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.jagw.LsPrefixEvent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jagw.LsPrefixEvent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getLsPrefix();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      core_topology_pb.LsPrefix.serializeBinaryToWriter
    );
  }
};


/**
 * required string action = 1;
 * @return {string}
 */
proto.jagw.LsPrefixEvent.prototype.getAction = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.jagw.LsPrefixEvent} returns this
 */
proto.jagw.LsPrefixEvent.prototype.setAction = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.jagw.LsPrefixEvent} returns this
 */
proto.jagw.LsPrefixEvent.prototype.clearAction = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.jagw.LsPrefixEvent.prototype.hasAction = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required string key = 2;
 * @return {string}
 */
proto.jagw.LsPrefixEvent.prototype.getKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.jagw.LsPrefixEvent} returns this
 */
proto.jagw.LsPrefixEvent.prototype.setKey = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.jagw.LsPrefixEvent} returns this
 */
proto.jagw.LsPrefixEvent.prototype.clearKey = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.jagw.LsPrefixEvent.prototype.hasKey = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional LsPrefix ls_prefix = 3;
 * @return {?proto.jagw.LsPrefix}
 */
proto.jagw.LsPrefixEvent.prototype.getLsPrefix = function() {
  return /** @type{?proto.jagw.LsPrefix} */ (
    jspb.Message.getWrapperField(this, core_topology_pb.LsPrefix, 3));
};


/**
 * @param {?proto.jagw.LsPrefix|undefined} value
 * @return {!proto.jagw.LsPrefixEvent} returns this
*/
proto.jagw.LsPrefixEvent.prototype.setLsPrefix = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.jagw.LsPrefixEvent} returns this
 */
proto.jagw.LsPrefixEvent.prototype.clearLsPrefix = function() {
  return this.setLsPrefix(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.jagw.LsPrefixEvent.prototype.hasLsPrefix = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.jagw.LsSrv6SidEvent.prototype.toObject = function(opt_includeInstance) {
  return proto.jagw.LsSrv6SidEvent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.jagw.LsSrv6SidEvent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jagw.LsSrv6SidEvent.toObject = function(includeInstance, msg) {
  var f, obj = {
    action: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    key: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    lsSrv6Sid: (f = msg.getLsSrv6Sid()) && core_topology_pb.LsSrv6Sid.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.jagw.LsSrv6SidEvent}
 */
proto.jagw.LsSrv6SidEvent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.jagw.LsSrv6SidEvent;
  return proto.jagw.LsSrv6SidEvent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.jagw.LsSrv6SidEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.jagw.LsSrv6SidEvent}
 */
proto.jagw.LsSrv6SidEvent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAction(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setKey(value);
      break;
    case 3:
      var value = new core_topology_pb.LsSrv6Sid;
      reader.readMessage(value,core_topology_pb.LsSrv6Sid.deserializeBinaryFromReader);
      msg.setLsSrv6Sid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.jagw.LsSrv6SidEvent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.jagw.LsSrv6SidEvent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.jagw.LsSrv6SidEvent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jagw.LsSrv6SidEvent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getLsSrv6Sid();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      core_topology_pb.LsSrv6Sid.serializeBinaryToWriter
    );
  }
};


/**
 * required string action = 1;
 * @return {string}
 */
proto.jagw.LsSrv6SidEvent.prototype.getAction = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.jagw.LsSrv6SidEvent} returns this
 */
proto.jagw.LsSrv6SidEvent.prototype.setAction = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.jagw.LsSrv6SidEvent} returns this
 */
proto.jagw.LsSrv6SidEvent.prototype.clearAction = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.jagw.LsSrv6SidEvent.prototype.hasAction = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required string key = 2;
 * @return {string}
 */
proto.jagw.LsSrv6SidEvent.prototype.getKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.jagw.LsSrv6SidEvent} returns this
 */
proto.jagw.LsSrv6SidEvent.prototype.setKey = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.jagw.LsSrv6SidEvent} returns this
 */
proto.jagw.LsSrv6SidEvent.prototype.clearKey = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.jagw.LsSrv6SidEvent.prototype.hasKey = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional LsSrv6Sid ls_srv6_sid = 3;
 * @return {?proto.jagw.LsSrv6Sid}
 */
proto.jagw.LsSrv6SidEvent.prototype.getLsSrv6Sid = function() {
  return /** @type{?proto.jagw.LsSrv6Sid} */ (
    jspb.Message.getWrapperField(this, core_topology_pb.LsSrv6Sid, 3));
};


/**
 * @param {?proto.jagw.LsSrv6Sid|undefined} value
 * @return {!proto.jagw.LsSrv6SidEvent} returns this
*/
proto.jagw.LsSrv6SidEvent.prototype.setLsSrv6Sid = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.jagw.LsSrv6SidEvent} returns this
 */
proto.jagw.LsSrv6SidEvent.prototype.clearLsSrv6Sid = function() {
  return this.setLsSrv6Sid(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.jagw.LsSrv6SidEvent.prototype.hasLsSrv6Sid = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.jagw.LsNodeEdgeEvent.prototype.toObject = function(opt_includeInstance) {
  return proto.jagw.LsNodeEdgeEvent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.jagw.LsNodeEdgeEvent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jagw.LsNodeEdgeEvent.toObject = function(includeInstance, msg) {
  var f, obj = {
    action: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    key: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    lsNodeEdge: (f = msg.getLsNodeEdge()) && core_topology_pb.LsNodeEdge.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.jagw.LsNodeEdgeEvent}
 */
proto.jagw.LsNodeEdgeEvent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.jagw.LsNodeEdgeEvent;
  return proto.jagw.LsNodeEdgeEvent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.jagw.LsNodeEdgeEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.jagw.LsNodeEdgeEvent}
 */
proto.jagw.LsNodeEdgeEvent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAction(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setKey(value);
      break;
    case 3:
      var value = new core_topology_pb.LsNodeEdge;
      reader.readMessage(value,core_topology_pb.LsNodeEdge.deserializeBinaryFromReader);
      msg.setLsNodeEdge(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.jagw.LsNodeEdgeEvent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.jagw.LsNodeEdgeEvent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.jagw.LsNodeEdgeEvent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jagw.LsNodeEdgeEvent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getLsNodeEdge();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      core_topology_pb.LsNodeEdge.serializeBinaryToWriter
    );
  }
};


/**
 * required string action = 1;
 * @return {string}
 */
proto.jagw.LsNodeEdgeEvent.prototype.getAction = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.jagw.LsNodeEdgeEvent} returns this
 */
proto.jagw.LsNodeEdgeEvent.prototype.setAction = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.jagw.LsNodeEdgeEvent} returns this
 */
proto.jagw.LsNodeEdgeEvent.prototype.clearAction = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.jagw.LsNodeEdgeEvent.prototype.hasAction = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required string key = 2;
 * @return {string}
 */
proto.jagw.LsNodeEdgeEvent.prototype.getKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.jagw.LsNodeEdgeEvent} returns this
 */
proto.jagw.LsNodeEdgeEvent.prototype.setKey = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.jagw.LsNodeEdgeEvent} returns this
 */
proto.jagw.LsNodeEdgeEvent.prototype.clearKey = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.jagw.LsNodeEdgeEvent.prototype.hasKey = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional LsNodeEdge ls_node_edge = 3;
 * @return {?proto.jagw.LsNodeEdge}
 */
proto.jagw.LsNodeEdgeEvent.prototype.getLsNodeEdge = function() {
  return /** @type{?proto.jagw.LsNodeEdge} */ (
    jspb.Message.getWrapperField(this, core_topology_pb.LsNodeEdge, 3));
};


/**
 * @param {?proto.jagw.LsNodeEdge|undefined} value
 * @return {!proto.jagw.LsNodeEdgeEvent} returns this
*/
proto.jagw.LsNodeEdgeEvent.prototype.setLsNodeEdge = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.jagw.LsNodeEdgeEvent} returns this
 */
proto.jagw.LsNodeEdgeEvent.prototype.clearLsNodeEdge = function() {
  return this.setLsNodeEdge(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.jagw.LsNodeEdgeEvent.prototype.hasLsNodeEdge = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.jagw.TelemetryEvent.prototype.toObject = function(opt_includeInstance) {
  return proto.jagw.TelemetryEvent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.jagw.TelemetryEvent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jagw.TelemetryEvent.toObject = function(includeInstance, msg) {
  var f, obj = {
    interfaceId: (f = msg.getInterfaceId()) && core_base_pb.InterfaceIdentifier.toObject(includeInstance, f),
    ipv4Address: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    dataRate: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,
    packetsSent: (f = jspb.Message.getField(msg, 4)) == null ? undefined : f,
    packetsReceived: (f = jspb.Message.getField(msg, 5)) == null ? undefined : f,
    state: (f = jspb.Message.getField(msg, 6)) == null ? undefined : f,
    lastStateTransitionTime: (f = jspb.Message.getField(msg, 7)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.jagw.TelemetryEvent}
 */
proto.jagw.TelemetryEvent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.jagw.TelemetryEvent;
  return proto.jagw.TelemetryEvent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.jagw.TelemetryEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.jagw.TelemetryEvent}
 */
proto.jagw.TelemetryEvent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new core_base_pb.InterfaceIdentifier;
      reader.readMessage(value,core_base_pb.InterfaceIdentifier.deserializeBinaryFromReader);
      msg.setInterfaceId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setIpv4Address(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setDataRate(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setPacketsSent(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setPacketsReceived(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setState(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setLastStateTransitionTime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.jagw.TelemetryEvent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.jagw.TelemetryEvent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.jagw.TelemetryEvent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jagw.TelemetryEvent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInterfaceId();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      core_base_pb.InterfaceIdentifier.serializeBinaryToWriter
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeInt64(
      5,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeString(
      6,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeInt64(
      7,
      f
    );
  }
};


/**
 * required InterfaceIdentifier interface_id = 1;
 * @return {!proto.jagw.InterfaceIdentifier}
 */
proto.jagw.TelemetryEvent.prototype.getInterfaceId = function() {
  return /** @type{!proto.jagw.InterfaceIdentifier} */ (
    jspb.Message.getWrapperField(this, core_base_pb.InterfaceIdentifier, 1, 1));
};


/**
 * @param {!proto.jagw.InterfaceIdentifier} value
 * @return {!proto.jagw.TelemetryEvent} returns this
*/
proto.jagw.TelemetryEvent.prototype.setInterfaceId = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.jagw.TelemetryEvent} returns this
 */
proto.jagw.TelemetryEvent.prototype.clearInterfaceId = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.jagw.TelemetryEvent.prototype.hasInterfaceId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string ipv4_address = 2;
 * @return {string}
 */
proto.jagw.TelemetryEvent.prototype.getIpv4Address = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.jagw.TelemetryEvent} returns this
 */
proto.jagw.TelemetryEvent.prototype.setIpv4Address = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.jagw.TelemetryEvent} returns this
 */
proto.jagw.TelemetryEvent.prototype.clearIpv4Address = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.jagw.TelemetryEvent.prototype.hasIpv4Address = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional int64 data_rate = 3;
 * @return {number}
 */
proto.jagw.TelemetryEvent.prototype.getDataRate = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.jagw.TelemetryEvent} returns this
 */
proto.jagw.TelemetryEvent.prototype.setDataRate = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.jagw.TelemetryEvent} returns this
 */
proto.jagw.TelemetryEvent.prototype.clearDataRate = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.jagw.TelemetryEvent.prototype.hasDataRate = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional int64 packets_sent = 4;
 * @return {number}
 */
proto.jagw.TelemetryEvent.prototype.getPacketsSent = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.jagw.TelemetryEvent} returns this
 */
proto.jagw.TelemetryEvent.prototype.setPacketsSent = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.jagw.TelemetryEvent} returns this
 */
proto.jagw.TelemetryEvent.prototype.clearPacketsSent = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.jagw.TelemetryEvent.prototype.hasPacketsSent = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional int64 packets_received = 5;
 * @return {number}
 */
proto.jagw.TelemetryEvent.prototype.getPacketsReceived = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.jagw.TelemetryEvent} returns this
 */
proto.jagw.TelemetryEvent.prototype.setPacketsReceived = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.jagw.TelemetryEvent} returns this
 */
proto.jagw.TelemetryEvent.prototype.clearPacketsReceived = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.jagw.TelemetryEvent.prototype.hasPacketsReceived = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional string state = 6;
 * @return {string}
 */
proto.jagw.TelemetryEvent.prototype.getState = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.jagw.TelemetryEvent} returns this
 */
proto.jagw.TelemetryEvent.prototype.setState = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.jagw.TelemetryEvent} returns this
 */
proto.jagw.TelemetryEvent.prototype.clearState = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.jagw.TelemetryEvent.prototype.hasState = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional int64 last_state_transition_time = 7;
 * @return {number}
 */
proto.jagw.TelemetryEvent.prototype.getLastStateTransitionTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.jagw.TelemetryEvent} returns this
 */
proto.jagw.TelemetryEvent.prototype.setLastStateTransitionTime = function(value) {
  return jspb.Message.setField(this, 7, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.jagw.TelemetryEvent} returns this
 */
proto.jagw.TelemetryEvent.prototype.clearLastStateTransitionTime = function() {
  return jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.jagw.TelemetryEvent.prototype.hasLastStateTransitionTime = function() {
  return jspb.Message.getField(this, 7) != null;
};


goog.object.extend(exports, proto.jagw);
